package histogram;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import java.lang.Math; 

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author adrian
 */
public class FrameH extends javax.swing.JFrame {

    /**
     * Creates new form FrameH
     */
    private String selection = "Equalization";
    private BufferedImage imageIn;
    private String imageMatchName = "entradaMatch.jpg";
    private BufferedImage imageM;
            
    public FrameH() {
        initComponents();
        String imageInName = "entrada.jpg";
        try{
           imageIn = ImageIO.read(new File(imageInName));
           lImg1.setIcon(new ImageIcon(new ImageIcon(imageIn).getImage().getScaledInstance(500, 500, Image.SCALE_DEFAULT)));
           pImage1.setSize(500, 500);
           lImg1.setSize(500, 500);
           
           imageM = ImageIO.read(new File(imageMatchName));
           jLabel1.setIcon(new ImageIcon(new ImageIcon(imageM).getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT)));

        }catch(Exception e){
            System.out.println("Error: " + e);
        }
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pImage2 = new javax.swing.JPanel();
        lImg2 = new javax.swing.JLabel();
        pImage1 = new javax.swing.JPanel();
        lImg1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rbEq = new javax.swing.JRadioButton();
        rbSp = new javax.swing.JRadioButton();
        bDo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 1200, 800));

        pImage2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        pImage2.setMaximumSize(new java.awt.Dimension(500, 500));
        pImage2.setMinimumSize(new java.awt.Dimension(500, 500));
        pImage2.setPreferredSize(new java.awt.Dimension(500, 500));
        pImage2.setLayout(new java.awt.BorderLayout());

        lImg2.setMaximumSize(new java.awt.Dimension(500, 500));
        lImg2.setMinimumSize(new java.awt.Dimension(500, 500));
        lImg2.setPreferredSize(new java.awt.Dimension(500, 500));
        pImage2.add(lImg2, java.awt.BorderLayout.CENTER);

        pImage1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        pImage1.setMaximumSize(new java.awt.Dimension(500, 500));
        pImage1.setMinimumSize(new java.awt.Dimension(500, 500));
        pImage1.setPreferredSize(new java.awt.Dimension(500, 500));
        pImage1.setLayout(new java.awt.BorderLayout());

        lImg1.setMaximumSize(new java.awt.Dimension(500, 500));
        lImg1.setMinimumSize(new java.awt.Dimension(500, 500));
        lImg1.setPreferredSize(new java.awt.Dimension(500, 500));
        pImage1.add(lImg1, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        bGroup.add(rbEq);
        rbEq.setSelected(true);
        rbEq.setText("Equalization");
        rbEq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEqActionPerformed(evt);
            }
        });

        bGroup.add(rbSp);
        rbSp.setText("Specification");
        rbSp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSpActionPerformed(evt);
            }
        });

        bDo.setText("Transform");
        bDo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoActionPerformed(evt);
            }
        });

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 100));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 100));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel2.setText("Specification image");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(rbEq)
                        .addGap(75, 75, 75)
                        .addComponent(rbSp)
                        .addGap(268, 268, 268))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bDo)
                        .addGap(93, 93, 93)))
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbEq)
                            .addComponent(rbSp))
                        .addGap(24, 24, 24)
                        .addComponent(bDo))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(pImage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pImage2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoActionPerformed
        String imageOutName = "salida.jpg";

        try {
            lImg2.setIcon(null);
            int width = imageIn.getWidth();
            int height = imageIn.getHeight();
            BufferedImage imageOut = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            

            switch(selection){
                        case "Equalization":
                            imageOut = equalize(imageIn);
                            break;
                        case "Specification":
                            imageOut = specification(imageIn,imageM);
                            break;
            }

            ImageIO.write(imageOut, "png", new File(imageOutName));
            lImg2.setIcon(new ImageIcon(new ImageIcon(imageOut).getImage().getScaledInstance(500, 500, Image.SCALE_DEFAULT)));
            pImage2.setSize(500, 500);
            lImg2.setSize(500, 500);
        }
        catch (IOException e) {
            System.out.println("Error: " + e);
        }
        


    }//GEN-LAST:event_bDoActionPerformed

    BufferedImage equalize(BufferedImage src){
        BufferedImage nImg = new BufferedImage(src.getWidth(), src.getHeight(),
                             BufferedImage.TYPE_BYTE_GRAY);
        WritableRaster wr = src.getRaster();
        WritableRaster er = nImg.getRaster();
        int totpix= wr.getWidth()*wr.getHeight();
        int[] histogram = new int[256];

        for (int x = 0; x < wr.getWidth(); x++) {
            for (int y = 0; y < wr.getHeight(); y++) {
                histogram[wr.getSample(x, y, 0)]++;
            }
        }

        float[] chistogram = new float[256];
        chistogram[0] = histogram[0]/(float)totpix;
        for(int i=1;i<256;i++){
            chistogram[i] = chistogram[i-1] + histogram[i]/(float)totpix;
        }

        float[] arr = new float[256];
        for(int i=0;i<256;i++){
            arr[i] =  chistogram[i]*255;
        }

        for (int x = 0; x < wr.getWidth(); x++) {
            for (int y = 0; y < wr.getHeight(); y++) {
                int nVal = (int) arr[wr.getSample(x, y, 0)];
                er.setSample(x, y, 0, nVal);
            }
        }
        nImg.setData(er);
        return nImg;
    }
    
    BufferedImage specification(BufferedImage src, BufferedImage match){
        BufferedImage nImg = new BufferedImage(src.getWidth(), src.getHeight(),
                             BufferedImage.TYPE_BYTE_GRAY);
        WritableRaster wr = src.getRaster();
        WritableRaster wrM = match.getRaster();
        
        WritableRaster er = nImg.getRaster();
        int totpix= wr.getWidth()*wr.getHeight();
        int totpixM= wrM.getWidth()*wrM.getHeight();
        
        int[] histogram = new int[256];
        int[] histogramM = new int[256];


        for (int x = 0; x < wr.getWidth(); x++) {
            for (int y = 0; y < wr.getHeight(); y++) {
                histogram[wr.getSample(x, y, 0)]++;
            }
        }
        
        for (int x = 0; x < wrM.getWidth(); x++) {
            for (int y = 0; y < wrM.getHeight(); y++) {
                histogramM[wrM.getSample(x, y, 0)]++;
            }
        }

        float[] chistogram = new float[256];
        chistogram[0] = histogram[0]/(float)totpix;
        float[] chistogramM = new float[256];
        chistogramM[0] = histogramM[0]/(float)totpixM;
        
        for(int i=1;i<256;i++){
            chistogram[i] = chistogram[i-1] + histogram[i]/(float)totpix;
            chistogramM[i] = chistogramM[i-1] + histogramM[i]/(float)totpixM;
        }

        float[] arr = new float[256];
        int aux = 0;
        for(int i=0;i<256;i++){
            float dif, difmin;
            int idx = aux,j = aux;
            dif = Math.abs(chistogramM[j] - chistogram[i]);
            difmin = dif;
            while(chistogramM[j] - chistogram[i] <= 0){
                dif = Math.abs(chistogramM[j] - chistogram[i]);
                if(dif < difmin){
                    difmin = dif;
                    idx = j;
                }
                j++;
                if(j==256)break;
            }
            if(chistogram[i] == 1) idx = aux;
            aux = idx;
            arr[i] = aux;
        }

        for (int x = 0; x < wr.getWidth(); x++) {
            for (int y = 0; y < wr.getHeight(); y++) {
                int nVal = (int) arr[wr.getSample(x, y, 0)];
                er.setSample(x, y, 0, nVal);
            }
        }
        nImg.setData(er);
        return nImg;
    }
    
    private void rbEqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEqActionPerformed
        selection = "Equalization";
        
    }//GEN-LAST:event_rbEqActionPerformed

    private void rbSpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSpActionPerformed
        selection = "Specification";
        
    }//GEN-LAST:event_rbSpActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameH().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDo;
    private javax.swing.ButtonGroup bGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lImg1;
    private javax.swing.JLabel lImg2;
    private javax.swing.JPanel pImage1;
    private javax.swing.JPanel pImage2;
    private javax.swing.JRadioButton rbEq;
    private javax.swing.JRadioButton rbSp;
    // End of variables declaration//GEN-END:variables
}
